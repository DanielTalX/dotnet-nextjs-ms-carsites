npm config set registry https://registry.npmjs.org/

Sec02 - Creating the first microservice
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Creating a simple API for the Auctions
    - CRUD
    - Seeding Data
    - Using Docker compose
    - Using Postman to test the API
- Creating the first micro service
    - create Carsties solution:
        - mkdir Carsties
        - cd Carsties
        - dotnet new sln
    - create a webapi project with dotnet v8:
        - cd Carsties
        - dotnet new webapi -o src/AuctionService --use-controllers
    - put thw webapi project inside the Carsties solution
        - cd Carsties
        - dotnet sln add src/AuctionService
- Reviewing and simplifying the project
    - in AuctionService.csproj:
        - set Nullable to disable
        - remain ImplicitUsings to enable
        - reamove all items in ItemGroup
    - in launchSettings.json:
        - remove iisSettings
        - remove https & IIS Express profiles
        - in http profile:
            - set launchBrowser to false
            - remove line "launchUrl": "swagger"
            - set "applicationUrl": "http://localhost:7001",
    - in appsettings.Development.json set  "Microsoft.AspNetCore": "Information"
    - Program.cs: remove anything that related to swagger
    - debuging the AuctionService:
        - cd src/AuctionService
        - dotnet watch
- Adding the entity classes
    - an entity represents a table inside a db
    - each of the entity properties represents a column inside that db
    - Auction, Item, Status
- Adding the Database context class
    - add Microsoft.EntityFrameworkCore.Design @Microsoft package to AuctionService from nuget gallery
    - add Npgsql.EntityFrameworkCore.PostgreSQL @Shay Rojansky,Austin Drenski,Yoh Deadfall package to AuctionService from nuget gallery
    - add AutoMapper.Extensions.Microsoft.DependencyInjection @Jimmy Bogard package to AuctionService from nuget gallery
    - add AuctionDbContext class
    - update program.cs to use the AuctionDbContext service and add it to the container
    - create db migration:
        - using dotnet-ef tool: to check if dotnet-ef tool installed globaly in the computer by: dotnet tool list -g
            if not, install it by: dotnet tool install dotnet-ef -g, or update it by: dotnet tool update dotnet-ef -g
        - execute the commands to create a new migration, which is going to take a look at our code and what we've written, 
            the Dbcontext class, and it's going to create a migration that will set up the database schema based on the code that we've written.
        - in AuctionService: dotnet ef migrations add "InitialCreate" -o Data/Migrations
- Adding a Postgres database server
    - install docker from https://docker.com & install docker vsc extension
    - inside the solution folder [Carsties] create docker-compose.yml file
    - [Carsties] run the docker compose file by: docker compose up -d
    - [AuctionService] run: dotnet ef database update
    - install PostgreSQL extension by Chris Kolkman & see the db
- Creating seed data
    - [AuctionService] to drop the db: dotnet ef database drop
    - run AuctionService & see the seed data
- Shaping the data to return
    - create DTOs folder
    - create RequestHelpers folder
    - update program.cs to use the AutoMapper service and add it to the container
- Adding an API controller
- Adding a postman collection
- Adding the create, update, delete auction endpoints


Sec03 - Creating a Search microservice
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Creating a Search Service
    - Adding MongoDb
    - Sync communication between Services
- Creating the second micro services
    - [Carsties] dotnet new webapi -o src/SearchService --use-controllers
    - [Carsties] dotnet sln add src/SearchService
    - clean the project as earlier
    - add nuget packages from gallery:
        - MongoDB.Entities @Đĵ ΝιΓΞΗΛψΚ
        - AutoMapper.Extensions.Microsoft.DependencyInjection @Jimmy Bogard
    - [SearchService] verify everything is ok by: dotnet build
    - [SearchService] run by: dotnet watch
- Adding the MongoDb server
    - https://mongodb.com
    - [Carsties] update docker-compose.yml file to use mongodb image
    - [Carsties] run the docker compose file by: docker compose up -d
    - installMongoDB for VS Code extension
    - [SearchService] run: dotnet ef database update
- Adding the Item model
- Adding seed data
- Adding a search controller
    - https://mongodb-entities.com
- Paginating the results
- Adding filtering and ordering
- Synchronous messaging
- Adding Http communication to get the data
- Making our Http communication resilient
    - add nuget gallery: Microsoft.Extensions.Http.Polly @Microsoft


Sec04 - RabbitMQ
~~~~~~~~~~~~~~~~
- What is RabbitMQ
- Installing RabbitMQ
    - https://rabbitmq.com
    - http://localhost:15672
        - Username: guest
        - Password: guest
- Adding and configuring mass transit
    - https://masstransit.io
    - nuget gallery: MassTransit.RabbitMQ @Chris Patterson to both AuctionService & SearchService 
    - add shared lib for MassTransit:
        - [Carsties] dotnet new classlib -o src/Contracts
        - [Carsties] dotnet sln add src/Contracts
        - [Contracts.csproj] set Nullable to disable
    - add a reference to Contracts library from both the auction & search service
        - [AuctionService] dotnet add reference ../../src/Contracts
        - [SearchService] dotnet add reference ../../src/Contracts
- Adding the contracts
- Adding a consumer to consume a message from the Service bus
- Publishing the Auction Created event to the bus
- What could go wrong?
- Adding a message outbox
    - add nuget gallery to AuctionService: MassTransit.EntityFrameworkCore @Chris Patterson
    - override OnModelCreating in [AuctionDbContext.cs] file to support outbox
    - add a migration to support outbox:
        - dotnet ef migrations add Outbox
- Using message retries
- Consuming fault queues
- Challenge + Solution: Adding the update and delete consumers


Sec05 - Identity Server
~~~~~~~~~~~~~~~~~~~~~~~
- Introduction to Section 5
- 0Auth and OpenlDConnect
- Creating the Identity Server project
    - Duende - https://docs.duendesoftware.com/identityserver/v7/quickstarts/0_overview/
        - [Carsties] dotnet new install Duende.IdentityServer.Templates
    - [Carsties] dotnet new isaspid -o src/IdentityServer
        -> run seed? No
    - [Carsties] dotnet sln add src/IdentityServer
- Reviewing and configuring our new project
    - [IdentityServer] remove PackageReference - "Microsoft.EntityFrameworkCore.Sqlite" from [IdentityServer.csproj]
    - [IdentityServer] install gallery nuget package: Npgsql.EntityFrameworkCore.PostgreSQL @Shay Rojansky,Austin Drenski,Yoh Deadfall
    - [IdentityServer.Properties.launchSettings.json] - set applicationUrl to http://localhost:5000
    - [HostingExtensions.cs] updates
    - run dotnet watch
- Seeding data and adding a migration
- Reviewing the login page in identity server
    - [SeedData.cs] updates
    - delete [Data/Migrations] folder
    - dotnet ef migrations add "InitialCreate" -o Data/Migrations
- Adding a register page
- Adding client credentials to allow clients to request a token
    - https://docs.duendesoftware.com/identityserver/v7/tokens/password_grant/
    - https://jwt.io/
- Adding a custom profile service to identity server
- Configuring auth on the resource server
    - [AuctionService] install gallery nuget package: Microsoft.AspNetCore.Authentication.JwtBearer @Microsoft
- Configuring the auth endpoints on the resource server


Sec06 - Adding a Gateway service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction to Section 6
- Adding the Gateway service
    - [Carsties] dotnet new web -o src/GatewayService
    - [Carsties] dotnet sln add src/GatewayService
    - [GatewayService] clean the project as earlier [GatewayService.csproj, launchSettings.json, appsettings.Development.json]
    - [GatewayService] install gallery nuget package:
        - Yarp.ReverseProxy @Microsoft
        - Microsoft.AspNetCore.Authentication.JwtBearer @Microsoft
- Adding the Reverse Proxy configuration
    - https://microsoft.github.io/reverse-proxy/
- Adding authentication to the Gateway config
- Testing our Gateway service in Postman
- finishing the remaining services before docker
    - Adding the remaining contracts we need
    - Adding the remaining consumers to the Auction Service
    - Adding the remaining consumers in the Search Service
    - Adding a new client to the Identity service configuration


Sec07 - Dockerizing the application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction to Section 7
- Dockerizing the Auction Service
- Updating our docker compose file for the Auction Service container
- Dockerising the Search service
- Dockerising the Identity Service
- Debugging a .Net service in a docker container
- Dockerising the Gateway Service
- Testing our docker containers


Sec08 - Adding the client side app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction to Section 8
- Creating the NextJS project
    - https://nextjs.org/docs/getting-started/installation
        - [Carsties/fronted] npx create-next-app@latest
        - [web-app] npm run dev
    - VSC Extension: 
        - Tailwind CSS IntelliSense
        - ES7+ React/Redux/React-Native snippets
        - Auto Close Tag
    - learn flex: https://flexboxfroggy.com/
    - react icons: https://react-icons.github.io/react-icons/
- Reviewing and simplifying the NextJS Project
    - Anything that we put inside the app folder is considered a server component
        and it's going to be rendered on the server side and return just the HTML to the client browser.
- Creating a nav bar
- Fetching data from the API
    - done in the server side
- Adding an Auction Card component
- Styling the auction cards
    - [next.config.mjs] allow image url
    - [tailwind.config.ts] enable css plugins
- Adding a countdown timer to the auction card
    - done in the client side by using 'use client'
- Adding loading to the images
- Adding types to the project
- Adding pagination to our list
    - https://flowbite-react.com/docs/getting-started/introduction
- Using server functions in client components
- Adding a set page size option
- Using Zustand for state management
    - https://docs.pmnd.rs/zustand/getting-started/introduction
- Refactoring our code to use the zustand state
- Adding a search bar
- Adding the search functionality 
- Adding a reset to the search function
- Adding the sorting functionality
- Adding the filtering functionality
- Adding a component to display when zero results


Sec09: Client side identity with NextAuth (AuthJS)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction
- Before we begin
- Installing Next Auth into our client app
    - https://next-auth.js.org/
- Adding the login functionality
    - web-app -> inspect -> Application -> Cookies -> delete all Cookies
    - identity-svc url -> inspect -> Application -> Cookies -> delete all Cookies
- Getting the session details in the client
    - adding env.local file so NextAuth could decrept token
- Populating the session data
    - NextAuth witj typescript - add user name to session.user
        - https://next-auth.js.org/getting-started/typescript#module-augmentation
        - creteing [next-auth.d.ts]
- Populating the User actions dropdown
- Protecting routes
    - https://next-auth.js.org/configuration/nextjs#middleware
- Testing API authentication
- Getting the access token to use to authenticate to our resource server
    - https://next-auth.js.org/tutorials/securing-pages-and-api-routes#using-gettoken


Sec10: CRUD operations in the client app
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction
- Routing in NextJS
- Getting the auctions won
- Creating an Auction form
    - https://react-hook-form.com/get-started
- Creating a reusable text input
- Creating a reusable date input
- Creating a fetch wrapper
- Adding the create auction server action
    - free images: https://pixabay.com/
- Adding react hot toast to display notifications if something goes wrong
- Adding the auction details page content
- Adding the edit auction page
- Adding the delete auction functionality


Sec11: Creating the bid service
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- Introduction
- Creating the Bid Service
    - [Carsties] dotnet new webapi -o src/BiddingService --use-controllers
    - [Carsties] dotnet sln add src/BiddingService
    - clean the project as earlier
    - add nuget packages from gallery:
        - MongoDB.Entities @Đĵ ΝιΓΞΗΛψΚ
        - Microsoft.AspNetCore.Authentication.JwtBearer @Microsoft
        - MassTransit.RabbitMQ @Chris Patterson
    - [BiddingService] verify everything is ok by: dotnet build
    - [BiddingService] run by: dotnet watch
- Adding the models to the Bid Service
- Adding an API Controller for the bids
- Adding the get bids endpoint
