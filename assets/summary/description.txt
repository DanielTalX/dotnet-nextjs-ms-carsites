npm config set registry https://registry.npmjs.org/

Sec02 - Creating the first microservice
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Creating a simple API for the Auctions
    - CRUD
    - Seeding Data
    - Using Docker compose
    - Using Postman to test the API
- Creating the first micro service
    - create Carsties solution:
        - mkdir Carsties
        - cd Carsties
        - dotnet new sln
    - create a webapi project with dotnet v8:
        - cd Carsties
        - dotnet new webapi -o src/AuctionService --use-controllers
    - put thw webapi project inside the Carsties solution
        - cd Carsties
        - dotnet sln add src/AuctionService
- Reviewing and simplifying the project
    - in AuctionService.csproj:
        - set Nullable to disable
        - remain ImplicitUsings to enable
        - reamove all items in ItemGroup
    - in launchSettings.json:
        - remove iisSettings
        - remove https & IIS Express profiles
        - in http profile:
            - set launchBrowser to false
            - remove line "launchUrl": "swagger"
            - set "applicationUrl": "http://localhost:7001",
    - in appsettings.Development.json set  "Microsoft.AspNetCore": "Information"
    - Program.cs: remove anything that related to swagger
    - debuging the AuctionService:
        - cd src/AuctionService
        - dotnet watch
- Adding the entity classes
    - an entity represents a table inside a db
    - each of the entity properties represents a column inside that db
    - Auction, Item, Status
- Adding the Database context class
    - add Microsoft.EntityFrameworkCore.Design @Microsoft package to AuctionService from nuget gallery
    - add Npgsql.EntityFrameworkCore.PostgreSQL @Shay Rojansky,Austin Drenski,Yoh Deadfall package to AuctionService from nuget gallery
    - add AutoMapper.Extensions.Microsoft.DependencyInjection @Jimmy Bogard package to AuctionService from nuget gallery
    - add AuctionDbContext class
    - update program.cs to use the AuctionDbContext service and add it to the container
    - create db migration:
        - using dotnet-ef tool: to check if dotnet-ef tool installed globaly in the computer by: dotnet tool list -g
            if not, install it by: dotnet tool install dotnet-ef -g, or update it by: dotnet tool update dotnet-ef -g
        - execute the commands to create a new migration, which is going to take a look at our code and what we've written, 
            the Dbcontext class, and it's going to create a migration that will set up the database schema based on the code that we've written.
        - in AuctionService: dotnet ef migrations add "InitialCreate" -o Data/Migrations
- Adding a Postgres database server
    - install docker from https://docker.com & install docker vsc extension
    - inside the solution folder [Carsties] create docker-compose.yml file
    - [Carsties] run the docker compose file by: docker compose up -d
    - [AuctionService] run: dotnet ef database update
    - install PostgreSQL extension by Chris Kolkman & see the db
- Creating seed data
    - [AuctionService] to drop the db: dotnet ef database drop
    - run AuctionService & see the seed data
- Shaping the data to return
    - create DTOs folder
    - create RequestHelpers folder
    - update program.cs to use the AutoMapper service and add it to the container
- Adding an API controller
- Adding a postman collection
- Adding the create, update, delete auction endpoints


Sec03 - Creating a Search microservice
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
- goals:
    - Creating a Search Service
    - Adding MongoDb
    - Sync communication between Services
- Creating the second micro services
    - [Carsties] dotnet new webapi -o src/SearchService --use-controllers
    - [Carsties] dotnet sln add src/SearchService
    - clean the project as earlier
    - add nuget packages from gallery:
        - MongoDB.Entities @Đĵ ΝιΓΞΗΛψΚ
        - AutoMapper.Extensions.Microsoft.DependencyInjection @Jimmy Bogard
    - [SearchService] verify everything is ok by: dotnet build
    - [SearchService] run by: dotnet watch
- Adding the MongoDb server
    - https://mongodb.com
    - [Carsties] update docker-compose.yml file to use mongodb image
    - [Carsties] run the docker compose file by: docker compose up -d
    - installMongoDB for VS Code extension
    - [SearchService] run: dotnet ef database update
- Adding the Item model
- Adding seed data
- Adding a search controller
    - https://mongodb-entities.com
- Paginating the results
- Adding filtering and ordering
- Synchronous messaging
- Adding Http communication to get the data
- Making our Http communication resilient
    - add nuget gallery: Microsoft.Extensions.Http.Polly @Microsoft


